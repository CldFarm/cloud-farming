name: Application CD

on:
  workflow_call: 

permissions:
  contents: write
  security-events: write
  id-token: write

jobs:
  cli-release:
    name: CLI Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
        aws-region: "eu-west-1"
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        java-package: jdk
    
    - name: Build CLI
      working-directory: ./apps/cli
      run: ./gradlew -q assemble #Can ignore tests now - ran the ci pipeline as a pre-req

    - name: Download CLI JDKs
      working-directory: ./apps/cli/build/libs
      run: |
        aws s3api get-object --bucket beanfarm-packaging-bucket --key packaging.zip packaging.zip
        unzip packaging.zip

        for i in $(find . -type d -name "cli-*"); do
          cp *.jar $i 
        done
        zip -r cli-windows-x64.zip cli-windows-x64/*
        tar -czvf cli-macos-x64.tar.gz cli-macos-x64
        tar -czvf cli-linux-x64.tar.gz cli-linux-x64
  
    - uses: cb80/delrel@latest
      with:
        tag: latest
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: cli latest
        body: |
          Packaged CLI
        draft: false
        prerelease: false

    - name: Upload release asset (Windows)
      id: upload-release-asset-win 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./apps/cli/build/libs/cli-windows-x64.zip
        asset_name: cli-windows-x64.zip
        asset_content_type: application/zip

    - name: Upload release asset (Linux)
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./apps/cli/build/libs/cli-linux-x64.tar.gz
        asset_name: cli-linux-x64.tar.gz
        asset_content_type: application/tar.gz

    - name: Upload linux release asset (MacOS)
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./apps/cli/build/libs/cli-macos-x64.tar.gz
        asset_name: cli-macos-x64.tar.gz
        asset_content_type: application/tar.gz


  api-deploy:
    name: API Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
        aws-region: "eu-west-1"
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        java-package: jdk

    - name: Build API
      working-directory: ./apps/api
      run: ./gradlew -q assemble #Can ignore tests now - ran the ci pipeline as a pre-req

    - name: Create ZIP Package
      working-directory: ./apps/api/build/libs
      run: zip -r deploy_package.zip .

    - name: Upload API Package
      working-directory: ./apps/api/build/libs
      run: aws s3 cp deploy_package.zip s3://beanfarm-deploy-bucket

    - name: Create New API Version
      run: aws elasticbeanstalk create-application-version --application-name api-app --source-bundle S3Bucket="beanfarm-deploy-bucket",S3Key="deploy_package.zip" --version-label "deploy-${{ github.sha }}" --description "commit-sha-${{ github.sha }}"

    - name: Deploy API
      run: aws elasticbeanstalk update-environment --environment-name api-env --version-label "deploy-${{ github.sha }}"
