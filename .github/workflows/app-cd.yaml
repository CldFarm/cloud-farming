name: Application CD

on:
  workflow_call: 

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  # cli-release:
  #   name: CLI Release
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v4

  #   - name: Setup Java JDK
  #     uses: actions/setup-java@v4
  #     with:
  #       distribution: 'temurin'
  #       java-version: '21'
  #       java-package: jdk
    
  #   - name: Build CLI
  #     working-directory: ./apps/cli
  #     run: ./gradlew -q assemble #Can ignore tests now - ran the ci pipeline as a pre-req

  #   - name: Create Release
  #     uses: softprops/action-gh-release@v2
  #     if: startsWith(github.ref, 'refs/tags/')
  #     with:
  #       files: ./apps/cli/build/libs/api
  zip_jar_with_jdk:
    runs-on: ${{matrix.platform}}
 
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]
 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
 
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        java-package: jdk
 
    - name: Build JAR
      working-directory: ./apps/cli
      run: ./gradlew -q assemble #Can ignore tests now - ran the ci pipeline as a pre-req
 
    - name: Determine OS specific commands
      run: |
        if [ ${{ matrix.platform }} == 'windows-latest' ]; then
          ZIP_COMMAND="zip"
        else
          ZIP_COMMAND="tar -czf"
        fi
 
    - name: Zip JAR with JDK for ${{ matrix.platform }}
      run: |
        mkdir -p zipped_jars
        $ZIP_COMMAND zipped_jars/${{ matrix.platform }}.zip ./apps/cli/build/libs/cli-0.0.1-SNAPSHOT.jar $JAVA_HOME
 
    - name: Upload zipped JAR artifact for ${{ matrix.platform }}
      uses: actions/upload-artifact@v2
      with:
        name: cli_${{ matrix.platform }}
        path: zipped_jars

  api-deploy:
    name: API Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
        aws-region: "eu-west-1"
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        java-package: jdk

    - name: Build API
      working-directory: ./apps/api
      run: ./gradlew -q assemble #Can ignore tests now - ran the ci pipeline as a pre-req

    - name: Create ZIP Package
      working-directory: ./apps/api/build/libs
      run: zip -r deploy_package.zip .

    - name: Upload API Package
      working-directory: ./apps/api/build/libs
      run: aws s3 cp deploy_package.zip s3://beanfarm-deploy-bucket

    - name: Create New API Version
      run: aws elasticbeanstalk create-application-version --application-name api-app --source-bundle S3Bucket="beanfarm-deploy-bucket",S3Key="deploy_package.zip" --version-label "deploy-${{ github.sha }}" --description "commit-sha-${{ github.sha }}"

    - name: Deploy API
      run: aws elasticbeanstalk update-environment --environment-name api-env --version-label "deploy-${{ github.sha }}"
